<?php

namespace App\Tasks;

class Sum
{
    public function sum($arr1, $arr2)
    {
        $res = [];
        $overflow = false;
        [$i, $j] = [count($arr1) - 1, count($arr2) - 1];

        while ($i >= 0 || $j >= 0) {
            $el1 = $el2 = 0;
            if ($i < 0) {
                $el2 = $arr2[$j];
            } elseif ($j < 0) {
                $el1 = $arr1[$i];
            } else {
                $el2 = $arr2[$j];
                $el1 = $arr1[$i];
            }

            $sum = $overflow ? ($el1 + $el2 + 1) : ($el1 + $el2);
            if ($overflow) {
                $overflow = false;
            }
            if ($divRes = (int)($sum / 10) === 1) {
                $overflow = true;
                $res[] = $sum % 10;
            } else {
                $res[] = $sum;
            }

            $i -= 1;
            $j -= 1;
        }

        if ($overflow) {
            $res[] = 1;
        }
        return array_reverse($res);
    }

//        $res = [];
//        $overflow = false;
//        [$i, $j] = [count($arr1) - 1, count($arr2) - 1];
//
//        while ($i >= 0 || $j >= 0) {
//            $el1 = $el2 = 0;
//            if ($i === 0) {
//                $el2 = $arr2[$j];
//            } elseif ($j === 0) {
//                $el1 = $arr1[$i];
//            } else {
//                $el2 = $arr2[$j];
//                $el1 = $arr1[$i];
//            }
//
//            $sum = $overflow ? ($el1 + $el2 + 1) : ($el1 + $el2 + 1);
//            if ($overflow) {
//                $overflow = false;
//            }
//            if ($divRes = (int)($sum / 10) === 1) {
//                $overflow = true;
//                $res[] = $sum % 10;
//            } else {
//                $res[] = $sum;
//            }
//        }
//
//        $i -= 1;
//        $j -= 1;
//
//        return array_reverse($res);

}

// Условие задачи
// Мы хотим складывать очень большие числа, которые превышают емкость базовых типов, поэтому мы храним их в виде массива неотрицательных чисел.

// Нужно написать функцию, которая примет на вход два таких массива, вычислит сумму чисел, представленных массивами, и вернет результат в виде такого же массива.

// Пример 1
// ввод
// arr1 = [1, 2, 3] # число 123
// arr2 = [4, 5, 6] # число 456
// вывод
// res = [5, 7, 9] # число 579. Допустим ответ с первым незначимым нулем [0, 5, 7, 9]
// Пример 2
// ввод
// arr1 = [5, 4, 4] # число 544
// arr2 = [4, 5, 6] # число 456
// вывод
// res = [1, 0, 0, 0] # число 1000


// Условие задачи
// Мы хотим складывать очень большие числа, которые превышают емкость базовых типов, поэтому мы храним их в виде массива неотрицательных чисел.

// Нужно написать функцию, которая примет на вход два таких массива, вычислит сумму чисел, представленных массивами, и вернет результат в виде такого же массива.

// Пример 1
// ввод
// arr1 = [1, 2, 3] # число 123
// arr2 = [4, 5, 6] # число 456
// вывод
// res = [5, 7, 9] # число 579. Допустим ответ с первым незначимым нулем [0, 5, 7, 9]
// Пример 2
// ввод
// arr1 = [5, 4, 4] # число 544
// arr2 = [4, 5, 6] # число 456
// вывод
// res = [1, 0, 0, 0] # число 1000

